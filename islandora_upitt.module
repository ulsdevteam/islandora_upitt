<?php

define('UPITT_SITEJUMP', 'View sitejump link');

/**
	* @file
	* Adds custom template selection to Pitt's Islandora instance.
	*/

/**
	* Implement hook_help().
	* $ret_val is assigned the return value.
	*/
function islandora_upitt_help($path, $arg) {
	switch ($path) {
		case 'admin/help#islandora_upitt': {
			$ret_val = '<h3>' . t('About') . '</h3>';
			$ret_val .= '<p>' . t('The islandora_upitt module allows the user to apply a particular template file for use with a particular object type, e.g. an image, book, or newspaper. This way, the proper view will load by default.') . '</p>';
			return $ret_val;
			break;
		}
	}
}

function islandora_upitt_menu() {
  $items['admin/islandora/tools/islandora_upitt/settings'] = array(
    'title' => 'Islandora Pitt',
    'description' => 'Settings for various options within the University of Pittsburgh system and workflow.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_upitt_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.form.inc',
  );
  $items['islandora/object/%islandora_object/viewer'] = array(
    'title' => 'View Object',
    'page callback' => 'islandora_view_object',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'weight' => -1,
    'access callback' => 'islandora_upitt_viewer_aaccess_callback',
    'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
  );
  if (variable_get('islandora_upitt_show_sitejump') == 1) {
    $items['islandora/object/%islandora_object/sitejump'] = array(
      'title' => variable_get('islandora_upitt_sitejump_tab_text', 'Site Jump'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_upitt_sitejump', 2),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array(UPITT_SITEJUMP),
    );
  }

  return $items;
}
function islandora_upitt_viewer_aaccess_callback($permission, $islandora_object) {
  /*
  drupal_static_reset('islandora_get_tuque_connection');
  $connection = islandora_get_tuque_connection();
  $page = $connection->repository->getObject('pitt:collection.137');
  $page->relationships->add('info:fedora/fedora-system:def/relations-external#', 'isMemberOfCollection', 'pitt:root');
  */


  if(islandora_object_access_callback($permission, $islandora_object) && in_array('islandora:collectionCModel', $islandora_object->models) == FALSE) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function islandora_upitt_menu_alter(&$items) {
  $items['islandora/object/%islandora_object']['page callback'] = 'islanora_upitt_view';
  $items['islandora/object/%islandora_object/view']['page callback'] = 'islanora_upitt_view';
  $items['islandora/object/%islandora_object/view']['title'] = 'Metadata';

  // TODO - FIXME... the "page argument" menu route parameter values need to be provided for each callback,
  // but since this was never working before it will need to be tested.  The following two lines should be
  // uncommented -- and then test all relevant pages.
  //  $items['islandora/object/%islandora_object']['page arguments'] = array(2);
  //  $items['islandora/object/%islandora_object/view']['page arguments'] = array(2);
}

function islanora_upitt_view($islandora_object) {
  if (in_array('islandora:collectionCModel', $islandora_object->models) === FALSE) {
    return theme('islandora_upitt_view', array('islandora_object' => $islandora_object));
  }
  else {
    // Object is a collection
    if (module_exists('upitt_islandora_solr_search_extras')) {
      return upitt_islandora_solr_search_extras_search_specific($islandora_object);
    }
    else {
      return islandora_view_object($islandora_object);
    }
  }
}

function islandora_upitt_theme() {
  return array(
    'islandora_upitt_view' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-upitt-view',
      'variables' => array(
        'islandora_object' => NULL,
      ),
    ),
  );
}

/**
 * This hook allows modules to register XSLT self-transformations.
 *
 * @return array
 *   An associative array mapping a shortened name to the full path of the
 *   transformation.
 */
function islandora_upitt_xml_form_builder_get_self_transforms() {
  return array(
    'pitt_cleanup_mods.xslt' => str_replace(DRUPAL_ROOT.'/', '', dirname(__FILE__).'/transforms/pitt_cleanup_mods.xsl'),
  );
}

function islandora_upitt_sitejump() {
  if (variable_get('islandora_upitt_show_sitejump') == 1) {
    $path = str_replace(":", "%3A", current_path());
    drupal_goto(variable_get('islandora_upitt_sitejump_domain', 'http://gamera.library.pitt.edu') . $path);
  }
}

/**
 * Implements hook_block_info().
 */
function islandora_upitt_block_info() {
    $block_dsids = variable_get('islandora_datastream_blocks_block_dsids', '');
    $block_dsids_arr = explode(",", $block_dsids);
    $b = array();
    foreach ($block_dsids_arr as $block_dsid) {
        $bid = trim($block_dsid);
        $blocks['idb-'.$bid] = array(
            'info' => t('Islandora Datastream Block {'.$bid.'}'),
            'cache' => DRUPAL_CACHE_PER_PAGE,
        );
        $b[] = $block_dsid;
    }
    return $blocks;
}


/**
 * Implements hook_block_view().
 */
function islandora_upitt_block_view($delta = '') {
    if ($delta == "*uninitialized*") { exit; }
    if (strstr($delta, 'idb-') <> '') {
        $block = array();
        $dsid = str_replace('idb-', '', $delta);
        include_once('sites/all/modules/islandora/includes/tuque.inc');

        $item = menu_get_item();
        if (isset($item['page_arguments'][0]) && is_object($item['page_arguments'][0]) && (get_class($item['page_arguments'][0]) == 'IslandoraFedoraObject')) {
            $fedora_object = $item['page_arguments'][0];
            $connection = islandora_get_tuque_connection();
            if ($connection) {
                try {
                    $info = $connection->api->a->describeRepository();
                    // If we are able to successfully call API-M::getDatastream, assume we are
                    // an authenticated user, as API-M is usally locked down.
                    $datastream = $fedora_object[$dsid];
                    $content = '';
                    if (($datastream) && (is_object($datastream))) {
                      // handle the various types of content there, the default will be rendered as straight text
                      switch ($datastream->mimetype) {
                        case 'image/jpeg':
                        case 'image/jpg':
                        case 'image/gif':
                        case 'image/png':
                          if (isset($fedora_object[$dsid])) {
                            $collection_tn_url = url("islandora/object/{$fedora_object->id}/datastream/{$dsid}/view");
                            $params = array(
                              'title' => $fedora_object->label,
                              'alt' => $fedora_object->label,
                              'path' => $collection_tn_url);
                            $content = theme('image', $params);
                          }
                          break;
                        default:
                          $tempFilename = tempnam("/tmp", "DS_html_");
                          $datastream->getContent($tempFilename);
                          $content = implode("", file($tempFilename));
                          @unlink($tempFilename);
                          break;
                      }
                    }

                    // blank title so that it doesn't cause a big h3
                    $block['subject'] = '';
                    $block['content'] =  theme('datastream_block',array('datastream_contents' => $content));
                    return $block;
                } catch (Exception $e) {
                    exit;
                }
            }
        }
    }
}

/**
 * Implements hook_permission().
 */
function islandora_upitt_permission() {
  return array(
    UPITT_SITEJUMP => array(
      'title' => t('View Sitejump link'),
      'description' => t('Sitejump to STAFF website will be available on islandora content pages.'),
    ),
  );
}

function islandora_upitt_token_info() {
  return array(
    'types' => array(
      'gaObjTracking' => array(
        'name' => 'Object Analytics',
        'description' => t("Tokens for Google Analytics tracking related to islandora objects."),
      ),
      'gaSearchTracking' => array(
        'name' => 'Search Analytics',
        'description' => t("Tokens for Google Analytics tracking related to islandora searching pages."),
      ),
    ),
    'tokens' => array(
      'gaObjTracking' => array(
        'collectionOfObject' => array(
          'name' => t("Collection of Object"),
          'description' => t("The Collections that an object belongs to as comma separated list."),),
        'collectionNamesOfObject' => array(
          'name' => t("Collection Names of Object"),
          'description' => t("The Collections that an object belongs to as comma separated list."),),
        'depositorOfObject' => array(
          'name' => t("Depositor of Object"),
          'description' => t("The Depositor for the object."),),
      ),
      'gaSearchTracking' => array(
        'search_all' => array(
          'name' => t("Anywhere in record"),
          'description' => t("Search anywhere in record for value."),),
        'search_title' => array(
          'name' => t("Search Title"),
          'description' => t("Search dc.title for value."),),
        'search_subject' => array(
          'name' => t("Search Subject"),
          'description' => t("Search dc.subject	for value."),),
        'search_description' => array(
          'name' => t("Search Description"),
          'description' => t("Search mods_abstract_mt for value."),),
        'search_date' => array(
          'name' => t("Search Date"),
          'description' => t("Search mods_originInfo_dateOther_ms for value."),),
        'search_creator' => array(
          'name' => t("Search Creator"),
          'description' => t("Search dc.creator for value."),),
        'search_identifier' => array(
          'name' => t("Search Identifier"),
          'description' => t("Search dc.identifier for value."),),
        'facet_creator' => array(
          'name' => t("Facet Creator"),
          'description' => t("Search mods_name_creator_namePart_ms for value."),),
        'facet_type' => array(
          'name' => t("Facet Type"),
          'description' => t("Search mods_typeOfResource_ms for value."),),
        'facet_source' => array(
          'name' => t("Facet Source"),
          'description' => t("Search mods_relatedItem_host_titleInfo_title_ms for value."),),
        'facet_subject' => array(
          'name' => t("Facet Subject"),
          'description' => t("Search mods_subject_topic_ms for value."),),
        'facet_collection' => array(
          'name' => t("Facet Collection"),
          'description' => t("Search RELS_EXT_isMemberOfCollection_uri_ms for value."),),
        'facet_depositor' => array(
          'name' => t("Facet Depositor"),
          'description' => t("Search mods_name_depositor_namePart_ms for value."),),
        'facet_copyrightStatus' => array(
          'name' => t("Facet Copyright Status"),
          'description' => t("Search mods_accessCondition_copyright_copyright_status_ms for value."),),
        'facet_publicationStatus' => array(
          'name' => t("Facet Publication Status"),
          'description' => t("Search mods_accessCondition_copyright_publication_status_ms for value."),),
        'facet_location' => array(
          'name' => t("Facet Location"),
          'description' => t("Search mods_subject_geographic_ms for value."),),
      ),
    )
  );
}

function islandora_upitt_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $sanitize = !empty($options['sanitize']);
  $replacements = array();
  if ($type == 'gaSearchTracking') {
    $token_to_solrfield_mapping = array('search_all' => 'catch_all_fields_mt', 'search_title' => 'dc.title', 'search_subject' => 'dc.subject', 'search_description' => 'mods_abstract_mt', 
      'search_date' => 'mods_originInfo_dateOther_ms', 'search_creator' => 'dc.creator', 'search_identifier' => 'dc.identifier', 
      'facet_creator' => 'mods_name_creator_namePart_ms', 'facet_type' => 'mods_typeOfResource_ms', 'facet_source' => 'mods_relatedItem_host_titleInfo_title_ms', 
      'facet_subject' => 'mods_subject_topic_ms', 'facet_collection' => 'RELS_EXT_isMemberOfCollection_uri_ms', 'facet_depositor' => 'mods_name_depositor_namePart_ms', 
      'facet_copyrightStatus' => 'mods_accessCondition_copyright_copyright_status_ms', 'facet_publicationStatus' => 'mods_accessCondition_copyright_publication_status_ms', 'facet_location' => 'mods_subject_geographic_ms');
    $cur_search = _get_current_search();
    $current_search = array();
    // make the solr field the key of the elements of this array -- searchNV is the name/value pair with "=" splitting them
    if (is_array($cur_search) && count($cur_search) > 0) {
      foreach ($cur_search as $k => $searchNV) {
        @list($field_name, $value) = explode("=", str_replace(array('"', ')', '('), "", $searchNV), 2);
        if ($value) {
          $current_search[$field_name] = _simplifySearchString($value);
        }
        else {
          @list($field_name, $value) = explode(":", $searchNV, 2);
          if ($value) {
            $current_search[$field_name] = _simplifySearchString($value);
          }
        }
      }
    }
    foreach ($tokens as $name => $original) {
      $token_key = array_key_exists($name, $token_to_solrfield_mapping) ? $token_to_solrfield_mapping[$name] : NULL;
      if ($token_key && array_key_exists($token_key, $current_search)) {
        // Since $sanitize will default to TRUE, this is never for display to browser -- let GA worry about encoding the values .. we just need to 
        // filter_xss to prevent any cross-site script attack.
        $replacements[$original] = ($sanitize) ? htmlspecialchars_decode(filter_xss($current_search[$token_to_solrfield_mapping[$name]])) : $current_search[$token_to_solrfield_mapping[$name]];
      }
    }
    return $replacements;
  } elseif ($type == 'gaObjTracking') {
    $islandora_object = menu_get_object('islandora_object', 2);
    if (!is_object($islandora_object)) {
      $items = menu_get_item();
      $islandora_object = (is_array($items['page_arguments']) && is_array($items['page_arguments']) && is_string($items['page_arguments'][0])) ? NULL : (is_array($items['page_arguments']) ? $items['page_arguments'][0] : NULL);
    }
    $islandora_object = (is_object($islandora_object) && get_class($islandora_object) == 'IslandoraFedoraObject') ? $islandora_object : NULL;
    if ($islandora_object) {
    foreach ($tokens as $name => $original) {
      if (!is_null($islandora_object) && ($name == 'collectionOfObject' || $name == 'collectionNamesOfObject' || $name == 'depositorOfObject')) {
        if ($name == 'collectionOfObject' || $name == 'collectionNamesOfObject') {
          $collections = upitt_get_solr_field_value($islandora_object, 'RELS_EXT_isMemberOfCollection_uri_ms', FALSE);
          if ($collections <> '()') { 
            $replacements[$original] = (($name == 'collectionOfObject') ? (($sanitize) ? htmlspecialchars_decode(filter_xss($collections)) : $collections) : 
              (($sanitize) ? htmlspecialchars_decode(filter_xss(_get_collection_names($collections))) : _get_collection_names($collections)));
          }
        } elseif ($name == 'depositorOfObject') {
          $depositor = upitt_get_solr_field_value($islandora_object, 'mods_name_depositor_namePart_ms', FALSE);
          if ($depositor <> '()') {
            $replacements[$original] = ($sanitize) ? htmlspecialchars_decode(filter_xss($depositor)) : $depositor;
          }
        }
      }
    }
    }
    return $replacements;
  }
  return array();
}

/**
 * Helper function to make the search text values all lower-case so that there are not multiple entries for the same text,
 * eg: "East Liberty" is the same as "east liberty", but without this they would be tracked as two different search term hits.
 */
function _simplifySearchString($in) {
  return str_replace(array('"',')', '(', "'"), "", strtolower($in));
}

/**
 * Helper function to get all of the current search terms and their corresponding values.
 */
function _get_current_search() {
  global $_islandora_solr_queryclass;
  if (!is_object($_islandora_solr_queryclass)) {
    return FALSE;
  }

  $params = $_islandora_solr_queryclass->solrParams['fq'];
  $keep_params = array();
  // Since the islandora_search uses POST variables to specify at least some of the search parameters, this method
  // will allow us to set the page parameter that is sent to Google Analytics
  // The base Solr filter should not matter for the Google Analytics side of things because all objects per site
  // are already expected to be limited to PID:(pitt*) AND RELS_EXT_isMemberOfSite_uri_ms:info\\:fedora\\/pitt\\:site.uls-digital-collections, etc.
  // strip out the fq value that begins with PID:(pitt*)...
  foreach ($params as $param) {
    if (strstr($param, 'PID:(pitt') == '') {
      $keep_params[] = str_replace("\=", "\:", str_replace(":", "=", $param));
    }
  }

  // if this is a dismax search, for the purposes of search tracking, simply log the string value as a catch_all_fields_mt
  if (strstr($_SERVER['REQUEST_URI'], 'type=dismax')) {
    $keep_params[] = 'catch_all_fields_mt:' . $_islandora_solr_queryclass->solrQuery;
  } else {
    $keep_params[] = str_replace("\=", "\:", str_replace(":", "=", $_islandora_solr_queryclass->solrQuery));
  }
  return $keep_params;
}

/**
 * Hook to modify the url_custom value on search pages - this will become the "Page" value within Google Analytics.
 */
function islandora_upitt_googleanalytics_url_custom_alter(&$url_custom) {
  $current_search = _get_current_search();
  $url_custom = ($current_search) ? '"/islandora/search/?' . implode('&', $current_search) . '"' : $url_custom;
}

/** 
 * Helper function for collectionNamesOfObject call.
 */ 
function _get_collection_names($collection_pids) { 
  if (!is_array($collection_pids)) { $collection_pids = explode(", ", $collection_pids); }
  foreach ($collection_pids as $k => $pid) {
    $collection_pids[$k] = str_replace(":", "\:", str_replace("info:fedora/", "", $pid));
  }
  $q = '(PID:' . implode(" OR PID:", $collection_pids) . ')';
  $str_results = _get_solr_query_results($q, 'fgs_label_s', FALSE);
  $arr = explode(", ", $str_results);
  foreach ($arr as $k=>$v) {
     $arr[$k] = '(' . $v . ')';
  }
  sort($arr);
  return implode(", ", $arr);
}  

/**
 * Helper function to lookup any solr field value for an islandora_object.
 */
function upitt_get_solr_field_value($islandora_object, $field, $single_result = TRUE, $pid = '') {
  $q = 'PID:' . str_replace(":", "\:", (is_null($islandora_object) && $pid) ? $pid : $islandora_object->id);
  $str_results = _get_solr_query_results($q, $field, $single_result);
  $arr = explode(", ", $str_results);
  foreach ($arr as $k=>$v) {
    $arr[$k] = '(' . $v . ')';
  }
  sort($arr);
  return implode(", ", $arr);
}

function _get_solr_query_results($query, $field, $single_result = TRUE, $pid = '') {
  $value = NULL;
  $query_processor = new IslandoraSolrQueryProcessor();
  $query_processor->solrQuery = $query;
  $query_processor->solrStart = 0;
  $query_processor->solrLimit = 20;
  $query_processor->solrParams = array(
    'fl' => $field,
    'fq' => variable_get('islandora_solr_base_filter', ''),
  );

  $query_processor->executeQuery(FALSE);
  if ($query_processor->islandoraSolrResult['response']['numFound'] > 0) {
    $solr_result_objects = $query_processor->islandoraSolrResult['response']['objects'];
    $values = array();
    $i = 0;
    foreach ($solr_result_objects as $object) {
      if (($single_result && $i < 1) || !($single_result)) {
        $cur_value = is_array($object['solr_doc'][$field]) ? implode(", ", $object['solr_doc'][$field]) : $object['solr_doc'][$field];
        if (!($field == 'RELS_EXT_isMemberOfCollection_uri_ms' && $cur_value == 'info:fedora/pitt:root')) {
          $values[] = (is_array($object['solr_doc'][$field])) ? implode(", ", array_unique($object['solr_doc'][$field])) : $object['solr_doc'][$field];
          $i++;
        }
      }
    }
    $value = implode(", ", $values);
  }
  return $value;
}

/**
 * This can adjust the page contents for any page within the Drupal site.
 *
 * For this site, we need to suppress the service links for the access_denied page as well as hide the sidebar
 */
function islandora_upitt_preprocess_page(&$variables) {
  $item = menu_get_item();
  if (is_array($item)) {
    $access_denied_vid = str_replace("node/", "", variable_get('site_403'));
    if (count($item['map']) > 1) {
      if ($item['map'][0] == 'node' && is_object($item['map'][1]) && $item['map'][1]->vid == $access_denied_vid &&
        (isset($variables['page']['content']['system_main']['nodes'][$access_denied_vid]['service_links']['#markup']))) {
        $variables['page']['content']['system_main']['nodes'][$access_denied_vid]['service_links']['#markup'] = '';
        $variables['page']['sidebar'] = array();
      }
    }
    // Hide the sidebar on these pages:
    if (strstr($item['path'], 'islandora/datastreams_io')) {
      $variables['page']['sidebar'] = array();
    }
  }
}

